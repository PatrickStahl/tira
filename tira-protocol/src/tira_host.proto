syntax = "proto3";
// -----------------------------------------------------------------------------
// Compilation
// -----------------------------------------------------------------------------

// Install the Google Protobuf protoc compiler:
//   Web: http://code.google.com/p/protobuf/
//   Apt: Search your repository for 'protobuf-compiler'
//
// Compile the schema file to generate source code:
//   C++ : $ protoc --cpp_out=path/to/generated/code  tira_host.proto
//   Java: $ protoc --java_out=path/to/generated/code tira_host.proto
//   Java gRPC: $ protoc --plugin=protoc-gen-grpc-java=build/exe/java_plugin/protoc-gen-grpc-java --grpc-java_out=. --proto_path=. tira_host.proto
//     See https://github.com/grpc/grpc-java/tree/master/compiler
//
// Python:
//   Install gRPC for Python: https://grpc.io/docs/languages/python/quickstart/
//   $ python -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. ./tira_host.proto

// -----------------------------------------------------------------------------
// Options
// -----------------------------------------------------------------------------

package tira.generated;

import "google/protobuf/empty.proto";
// import "tira_messages.proto";

// Becomes the package name of the generated Java code
option java_package = "de.webis.tira.client.web.generated";

// option java_multiple_files = true;
option java_outer_classname = "TiraHostMessages";
// option objc_class_prefix = "THM";

// Other options
option optimize_for = SPEED;

// -----------------------------------------------------------------------------
// Definitions
// -----------------------------------------------------------------------------

// The service definition.
service TiraHostService {
  rpc test (Input) returns (Output) {}
  rpc vm_backup (RequestVmCommands) returns (Response) {}
  rpc vm_create (RequestVmCreate) returns (Response) {}
  rpc vm_delete (RequestVmCommands) returns (Response) {}
  rpc vm_info (RequestVmCommands) returns (ResponseVmInfo) {}
  rpc vm_list (google.protobuf.Empty) returns (Response) {}
  rpc vm_metrics (RequestVmCommands) returns (Response) {}
  rpc vm_sandbox (RequestVmCommands) returns (Response) {}
  rpc vm_shutdown (RequestVmCommands) returns (Response) {}
  rpc vm_snapshot (RequestVmCommands) returns (Response) {}
  rpc vm_start (RequestVmCommands) returns (Response) {}
  rpc vm_stop (RequestVmCommands) returns (Response) {}
  rpc vm_unsandbox (RequestVmCommands) returns (Response) {}
  rpc run_execute(RequestRunExecuteEval) returns (Response) {}
  rpc run_eval(RequestRunExecuteEval) returns (Response) {}
}


// Message definitions.
message Input {
  string text = 1;
}
message Output {
  string text = 1;
}

message RequestVmCommands {
  string vmName = 1;
}

message RequestVmCreate {
  string ovaFile = 1;
  string userName = 2;
  string bulkCommandId = 3;
}

message RequestRunExecuteEval {
  string submissionFile = 4;
  string inputDatasetName = 5;
  string inputRunPath = 6;
  string outputDirName = 7;
  string sandboxed = 8;
  string runId = 9;
  string snapshotName = 10;
  string optionalParameters = 11;
}

message Response {
    enum Status {
      RUNNING = 0;
      SUCCESS = 1;
      FAILED = 2;
    }
    Status status = 5;
    string commandId = 6;
}

message ResponseVmInfo {
  string guestOs = 1;
  string memorySize = 2;
  string numberOfCpus = 3;
  string state = 4;
  string sshPort = 5;
  string rdpPort = 6;
  string host = 7;
  bool sshPortStatus = 8;
  bool rdpPortStatus = 9;
}

// TODO: add response message for vm_create command parsing vm access details
//message ResponseVmCreate {
//  string userName = 1;
//  string userPwd = 2;
//}

message CommandState {
  string hostname = 1;

  message Command {
    string id = 1;
    string commandString = 2;
    string startTime = 3;
    string endTime = 4;
    enum Status {
      RUNNING = 0;
      SUCCESS = 1;
      FAILED = 2;
    }
    Status status = 5;
    string logFile = 6;
    int32 returnCode = 7;
    string bulkCommandId = 8;
  }

  repeated Command commands = 2;
}
