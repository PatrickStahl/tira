syntax = "proto3";
// -----------------------------------------------------------------------------
// Compilation
// -----------------------------------------------------------------------------

// Install the Google Protobuf protoc compiler:
//   Web: http://code.google.com/p/protobuf/
//   Apt: Search your repository for 'protobuf-compiler'
//
// Compile the schema file to generate source code:
//   C++ : $ protoc --cpp_out=path/to/generated/code  tira_host.proto
//   Java: $ protoc --java_out=path/to/generated/code tira_host.proto
//   Java gRPC: $ protoc --plugin=protoc-gen-grpc-java=build/exe/java_plugin/protoc-gen-grpc-java --grpc-java_out=. --proto_path=. tira_host.proto
//     See https://github.com/grpc/grpc-java/tree/master/compiler
//
// Python:
//   Install gRPC for Python: https://grpc.io/docs/languages/python/quickstart/
//   $ python -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. ./tira_host.proto

// -----------------------------------------------------------------------------
// Options
// -----------------------------------------------------------------------------

package tira.generated;

import "google/protobuf/empty.proto";
// import "tira_messages.proto";

// Becomes the package name of the generated Java code
option java_package = "de.webis.tira.client.web.generated";

// option java_multiple_files = true;
option java_outer_classname = "TiraHostMessages";
// option objc_class_prefix = "THM";

// Other options
option optimize_for = SPEED;

// -----------------------------------------------------------------------------
// Definitions
// -----------------------------------------------------------------------------

// The service definition.
service TiraHostService {
  rpc vm_backup (VmId) returns (Transaction) {}
  rpc vm_create (VmCreate) returns (Transaction) {}
  rpc vm_delete (VmId) returns (Transaction) {}
  rpc vm_info (VmId) returns (VmInfo) {}
  rpc vm_list (google.protobuf.Empty) returns (Transaction) {}
  rpc vm_metrics (VmId) returns (Transaction) {}
  rpc vm_sandbox (VmId) returns (Transaction) {}
  rpc vm_shutdown (VmId) returns (Transaction) {}
  rpc vm_snapshot (VmId) returns (Transaction) {}
  rpc vm_start (VmId) returns (Transaction) {}
  rpc vm_stop (VmId) returns (Transaction) {}
  rpc vm_unsandbox (VmId) returns (Transaction) {}
  rpc run_execute(RunDetails) returns (Transaction) {}
  rpc run_abort(VmId) returns (Transaction) {}
  rpc run_eval(RunDetails) returns (Transaction) {}
  rpc alive (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

service TiraApplicationService {
  rpc set_state (VmState) returns (Transaction) {}
  rpc confirm_vm_create (VmDetails) returns (Transaction) {}
  rpc confirm_vm_delete (VmId) returns (Transaction) {}
  rpc confirm_run_eval (EvaluationResults) returns (Transaction) {}
  // rpc confirm_run_execute (VmState) returns (Transaction) {} // TODO transmit the results of the run that should be displayed on the website (i.e. runDir without output)
  rpc confirm_transaction (Transaction) returns (Transaction) {}
}

enum Status {
  SUCCESS = 0;
  FAILED = 1;
}

enum State {
    UNDEFINED = 0;
    RUNNING = 1;
    POWERED_OFF = 2;
    POWERING_ON = 3;
    POWERING_OFF = 4;
    SANDBOXING = 5;
    UNSANDBOXING = 6;
    EXECUTING = 7;
    ARCHIVED = 8;
}

// NOTE: replaces RequestVmCreate and RequestVmCommands from previous versions. TODO should be called VmId
message VmId {
  string vmId = 1;
}

// TODO : Who determines the vmUserName and vmUserPassword? I would say the Host, so these should be part of the response
message VmCreate {
  string vmId = 1;
  string userId = 2;  // TODO userName? Identical to vmId?
  string ovaFile = 3;
  string bulkCommandId = 4;
}

message VmDetails {
  string vmId = 1;
  string userId = 2;  // TODO Identical to vmId?
  string userName = 3;
  string initialUserPw = 4;  // TODO see this as initial password. Hosts may refuse to include this here.
  string ip = 5;
  string sshPort = 6;
  string rdpPort = 7;
  // string adminName = 8; // TODO I've taken them out. The idea here is that only the host knows the admin pass and uses this to execute the software.
  // string adminPw = 9;
}

message RunId {
  string vmId = 1;
  string datasetId = 2;
  string runId = 3;
}

// TODO again, when telling the host to execute a software, it needs to know how to connect to it, hence we only need to submit the software details.
message RunDetails {
  RunId runId = 1;
  string workingDir = 2;
  string command = 3;
  RunId inputRunId = 4;
  string optionalParameters = 5;
  // string outputDirName = 6;  // Host must determine this
  // string sandboxed = 7;  // Note sure how this makes sense
  // string snapshotName = 8; // Note sure if this still makes sense
}

message EvaluationResults {
  message Measure {
    string key   = 1;
    string value = 2;
  }
  RunId runId = 1;
  repeated Measure measures = 2;
}

message Transaction {
  Status status = 1;
  string transactionId = 2;
  string message = 3;
}

message VmState {
  Status status = 1;
  State state = 2;
  string vmId = 3;
  string message = 4;
}

message VmInfo {
  Status status = 1;
  string guestOs = 2;
  string memorySize = 3;
  string numberOfCpus = 4;
  string sshPort = 5;
  string rdpPort = 6;
  string host = 7;
  bool sshPortStatus = 8;
  bool rdpPortStatus = 9;
  State state = 10;
}

message CommandState {
  string hostname = 1;

  message Command {
    string id = 1;
    string commandString = 2;
    string startTime = 3;
    string endTime = 4;
    enum Status {
      RUNNING = 0;
      SUCCESS = 1;
      FAILED = 2;
    }
    Status status = 5;
    string logFile = 6;
    int32 returnCode = 7;
    string bulkCommandId = 8;
  }

  repeated Command commands = 2;
}
